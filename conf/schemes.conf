addr scheme

mdr_to_gprar 	split[0,4]		 		in[bus.mdr]
gprar 			reg[5] 					in[mdr_to_gprar] ld[uprav.ldgprar] inc[uprav.incgprar]
ab_to_mx1		int_to_int[8,16]		in[exec1.ab]
mx1 			mp[2, 16]				in[ab_to_mx1, exec1.aw] ctrl[uprav.mxgpr]
gpr				regs[32, 16]			in[gprar, mx1] wr[uprav.wrgpr] rd[true]					
sp 				reg[16] 				in[exec1.aw] inc[uprav.incsp] dec[uprav.decsp] ld[uprav.ldsp] init[4096]
add 			add[16]					in[mx2, mx3]
cw 				reg[16]					in[add] ld[uprav.ldcw]
mx2				mp[4, 16] 				in[intr3.ivtp, gpr, fetch1.pc, cw] ctrl[uprav.mxadda0, uprav.mxadda1]
mx3 			mp[4, 16]				in[intr3.ivtdsp, fetch1.ir15_0, gpr, ir_to_mx3] ctrl[uprav.mxaddb0, uprav.mxaddb1]
ir_to_mx3 		int_to_int[8,16,true] 	in[fetch1.ir23_16]

bus	scheme

mx1				mp[8, 8]				in[fetch1.pc, addr.gpr, fetch1.ir15_0, dw, addr.add, addr.sp] ctrl[uprav.mxmar0, uprav.mxmar1, uprav.mxmar2]
mx2				mp[8, 8]				in[bus.dbus, exec1.ab, exec1.aw15_8, exec1.aw7_0, fetch1.pc15_8, fetch1.pc7_0, exec2.psw15_8, exec2.psw7_0] ctrl[uprav.mxmdr0, uprav.mxmdr1, uprav.mxmdr2]
mar				reg[16]					in[mx1] ld[uprav.ldmar] inc[uprav.incmar]
mdr				reg[16]					in[mx2] ld[ldmdr]
mdr_bool		int_to_bool[8]			in[mdr]
ldmdr			or[2]					in[uprav.ldmdr, mdrin]
mdrin			and[2]					in[uprav.rdcpu, fccpu]
fccpu			not						in[notfcbus]
notfcbus		tsb_bool				in[bus.fcbus]
mar_out			tsb[16]					in[mar] ctrl[uprav.emar]
mdr_out			tsb[8]					in[mdr] ctrl[uprav.emdr]
dwh				reg[8]					in[mdr] ld[uprav.lddwh]
dwl				reg[8]					in[mdr] ld[uprav.lddwl]
dw				agg[2, 16]				in[dwl, dwh]
notrdbus		not						in[onerdbus]
notwrbus		not						in[onewrbus]
onerdbus		tsb_bool				in[true] ctrl[uprav.rdcpu]
onewrbus		tsb_bool				in[true] ctrl[uprav.wrcpu]
hack			and[2]					in[ui.hreq, notemar]
notemar			not						in[uprav.emar]
dbus			bus[2, 8]				in[mdr_out, mem_oper.mem_out]
abus			bus[1, 16]				in[mar_out]
abus_bool		int_to_bool[16]			in[abus]
rdbus			bus_bool[1]				in[notrdbus]
wrbus			bus_bool[1]				in[notwrbus]
fcbus			bus_bool[1]				in[mem_oper.fcbus]

exec1 scheme

alu				alu						in[ab, bb] not[uprav.not] xor[uprav.xor] or[uprav.or] and[uprav.and] dec[uprav.dec] inc[uprav.inc] sub[uprav.sub] add[uprav.add] 
alu_bool		int_to_bool[8]			in[alu]
ab				reg[8]					in[mx1] ld[uprav.ldab] shr[uprav.shr] ir[mx3] shl[uprav.shl] il[mx4]
bb				reg[8]					in[mx2] ld[uprav.ldbb]
bb_bool			int_to_bool[8]			in[bb]
mx1				mp[2, 8]				in[alu, bb] ctrl[uprav.mxab]
mx2				mp[4, 8]				in[addr.gpr, bus.mdr, fetch1.ir15_8] ctrl[uprav.mxbb0, uprav.mxbb1]
ab_bool			int_to_bool[8]			in[ab]
mx3				mp_bool[4]				in[ab7, false, ab0, exec2.pswc] ctrl[cd1_0, cd1_1]
cd1				cd[4]					in[fetch2.asr, fetch2.lsr, fetch2.ror, fetch2.rorc] out[cd1_0, cd1_1]
mx4				mp_bool[4]				in[false, false, ab7, exec2.pswc] ctrl[cd2_0, cd2_1]
cd2				cd[4]					in[fetch2.asl, fetch2.lsl, fetch2.rol, fetch2.rolc] out[cd2_0, cd2_1]
aw				reg[16]					in[mx5] ld[uprav.ldaw]
aw15_8			split[8, 15]			in[aw]
aw7_0			split[0, 7]				in[aw]
mx5				mp[4, 16]				in[bw, addr.sp, intr3.ivtp, intr1.imr] ctrl[uprav.mxaw0, uprav.mxaw1]
bw				reg[16]					in[mx6] ld[uprav.ldbw]
mx6				mp[4,16]				in[addr.gpr, bus.dw, fetch1.ir15_0] ctrl[uprav.mxbw0, uprav.mxbw1]

exec2 scheme

pswi			rsff					in[pswi_s, pswi_r]
pswi_s			or[2]					in[uprav.stpswi, pswi_s_and]
pswi_s_and		and[2]					in[uprav.ldpswh, bus.mdr7]
pswi_r			or[2]					in[uprav.clpswi, pswi_r_and]
pswi_r_and		and[2]					in[uprav.ldpswh, /bus.mdr7]

pswt			rsff					in[pswt_s, pswt_r]
pswt_s			or[2]					in[uprav.stpswt, pswt_s_and]
pswt_s_and		and[2]					in[uprav.ldpswh, bus.mdr6]
pswt_r			or[2]					in[uprav.clpswt, pswt_r_and]
pswt_r_and		and[2]					in[uprav.ldpswh, /bus.mdr6]

pswn			rsff					in[pswn_s, pswn_r]
pswn_s			or[2]					in[pswn_s_and0, pswn_s_and1]
pswn_s_and0		and[2]					in[uprav.ldn, exec3.n]
pswn_s_and1		and[2]					in[uprav.ldpswl, bus.mdr0]
pswn_r			or[2]					in[pswn_r_and0, pswn_r_and1]
pswn_r_and0		and[2]					in[uprav.ldpswl, /bus.mdr0]
pswn_r_and1		and[2]					in[uprav.ldn, /exec3.n]

pswz			rsff					in[pswz_s, pswz_r]
pswz_s			or[2]					in[pswz_s_and0, pswz_s_and1]
pswz_s_and0		and[2]					in[uprav.ldz, exec3.z]
pswz_s_and1		and[2]					in[uprav.ldpswl, bus.mdr1]
pswz_r			or[2]					in[pswz_r_and0, pswz_r_and1]
pswz_r_and0		and[2]					in[uprav.ldpswl, /bus.mdr1]
pswz_r_and1		and[2]					in[uprav.ldz, /exec3.z]

pswc			rsff					in[pswc_s, pswc_r]
pswc_s			or[2]					in[pswc_s_and0, pswc_s_and1]
pswc_s_and0		and[2]					in[uprav.ldc, exec3.c]
pswc_s_and1		and[2]					in[uprav.ldpswl, bus.mdr2]
pswc_r			or[2]					in[pswc_r_and0, pswc_r_and1]
pswc_r_and0		and[2]					in[uprav.ldpswl, /bus.mdr2]
pswc_r_and1		and[2]					in[uprav.ldc, /exec3.c]

pswv			rsff					in[pswv_s, pswv_r]
pswv_s			or[2]					in[pswv_s_and0, pswv_s_and1]
pswv_s_and0		and[2]					in[uprav.ldv, exec3.v]
pswv_s_and1		and[2]					in[uprav.ldpswl, bus.mdr3]
pswv_r			or[2]					in[pswv_r_and0, pswv_r_and1]
pswv_r_and0		and[2]					in[uprav.ldpswl, /bus.mdr3]
pswv_r_and1		and[2]					in[uprav.ldv, /exec3.v]

pswl0			rsff					in[pswl0_s, pswl0_r]
pswl0_s			or[2]					in[pswl0_s_and0, pswl0_s_and1]
pswl0_s_and0	and[2]					in[uprav.ldl, intr2.prl0]
pswl0_s_and1	and[2]					in[uprav.ldpswl, bus.mdr4]
pswl0_r			or[2]					in[pswl0_r_and0, pswl0_r_and1]
pswl0_r_and0	and[2]					in[uprav.ldpswl, /bus.mdr4]
pswl0_r_and1	and[2]					in[uprav.ldl, /intr2.prl0]

pswl1			rsff					in[pswl1_s, pswl1_r]
pswl1_s			or[2]					in[pswl1_s_and0, pswl1_s_and1]
pswl1_s_and0	and[2]					in[uprav.ldl, intr2.prl1]
pswl1_s_and1	and[2]					in[uprav.ldpswl, bus.mdr5]
pswl1_r			or[2]					in[pswl1_r_and0, pswl1_r_and1]
pswl1_r_and0	and[2]					in[uprav.ldpswl, /bus.mdr5]
pswl1_r_and1	and[2]					in[uprav.ldl, /intr2.prl1]

pswl2			rsff					in[pswl2_s, pswl2_r]
pswl2_s			or[2]					in[pswl2_s_and0, pswl2_s_and1]
pswl2_s_and0	and[2]					in[uprav.ldl, intr2.prl2]
pswl2_s_and1	and[2]					in[uprav.ldpswl, bus.mdr6]
pswl2_r			or[2]					in[pswl2_r_and0, pswl2_r_and1]
pswl2_r_and0	and[2]					in[uprav.ldpswl, /bus.mdr6]
pswl2_r_and1	and[2]					in[uprav.ldl, /intr2.prl2]

psw7_0			bool_to_int[8]			in[pswn, pswz, pswc, pswv, pswl0, pswl1, pswl2, false]
psw15_8			bool_to_int[8]			in[false, false, false, false, false, false, pswt, pswi]
start			rsff					in[false, uprav.clstart] init[true]

exec3 scheme

n				and[2]					in[exec1.ab7, n_z_or]
n_z_or			or[18]					in[fetch2.ldb, fetch2.popb, fetch2.add, fetch2.sub, fetch2.inc, fetch2.dec, fetch2.and, fetch2.or, fetch2.xor, fetch2.not, fetch2.asr, fetch2.lsr, fetch2.ror, fetch2.rorc, fetch2.asl, fetch2.lsl, fetch2.rol, fetch2.rolc]
z				and[2]					in[n_z_or, z_and]
z_and			and[8]					in[/exec1.ab0, /exec1.ab1, /exec1.ab2, /exec1.ab3, /exec1.ab4, /exec1.ab5, /exec1.ab6, /exec1.ab7]
c				or[4]					in[c_and0, c_and1, c_and2, c_and3]
c_and0			and[2]					in[c_or0, exec1.alu_c8]
c_and1			and[2]					in[c_or1, /exec1.alu_c8]
c_and2			and[2]					in[c_or2, exec1.ab0]
c_and3			and[2]					in[c_or3, exec1.ab7]
c_or0			or[2]					in[fetch2.add, fetch2.inc]
c_or1			or[2]					in[fetch2.sub, fetch2.dec]
c_or2			or[4]					in[fetch2.asr, fetch2.lsr, fetch2.ror, fetch2.rorc]
c_or3			or[4]					in[fetch2.asl, fetch2.lsl, fetch2.rol, fetch2.rolc]
v				or[4]					in[v_and0, v_and1, v_and2, v_and3]
v_and0			and[2]					in[fetch2.add, vadd]
v_and1			and[2]					in[fetch2.sub, vsub]
v_and2			and[2]					in[fetch2.inc, vinc]
v_and3			and[2]					in[fetch2.dec, vdec]
vadd			or[2]					in[vadd_and0, vadd_and1]
vadd_and0		and[3]					in[/exec1.ab7, /exec1.bb7, exec1.alu7]
vadd_and1		and[3]					in[exec1.ab7, exec1.bb7, /exec1.alu7]
vsub			or[2]					in[vsub_and0, vsub_and1]
vsub_and0		and[3]					in[/exec1.ab7, exec1.bb7, exec1.alu7]
vsub_and1		and[3]					in[exec1.ab7, /exec1.bb7, /exec1.alu7]
vinc			and[2]					in[/exec1.ab7, exec1.alu7]
vdec			and[2]					in[exec1.ab7, /exec1.alu]

exec4 scheme

eql				pin						in[exec2.pswz]
neql			not						in[exec2.pswz]
lss				xor[2]					in[exec2.pswn, exec2.pswv]
grte			not						in[lss]
lsse			or[2]					in[lss, exec2.pswz]
grt				not						in[lsse]
lsseu			or[2]					in[exec2.pswc, exec2.pswz]
grtu			not						in[lsseu]
lssu			pin						in[exec2.pswc]
grteu			not						in[exec2.pswc]
ovf				pin						in[exec2.pswv]
novf			not						in[exec2.pswv]
neg				pin						in[exec2.pswn]
nneg			not						in[exec2.pswn]

mx7				mp_bool[8]				in[eql, neql, neg, nneg, ovf, novf, lssu, grteu] ctrl[fetch1.ir24, fetch1.ir25, fetch1.ir26]
mx8				mp_bool[8]				in[grt, grte, lss, lsse, grtu, grteu, lssu, lsseu] ctrl[fetch1.ir24, fetch1.ir25, fetch1.ir26]
// greska mx7 ide na 0 ulaz od brpom umesto mx8
brpom			mp_bool[2]				in[mx7, mx8] ctrl[fetch1.ir27]

fetch1 scheme

pc				reg[16]					in[mx] inc[uprav.incpc] ld[uprav.ldpc]
pc15_8			split[8, 15]			in[pc]
pc7_0			split[0, 7]				in[pc]
mx				mp[4, 16]				in[bus.dw, addr.add, ir23_8] ctrl[uprav.mxpc0, uprav.mxpc1]
ir31_24			reg[8]					in[bus.mdr] ld[uprav.ldir0]
ir23_16			reg[8]					in[bus.mdr] ld[uprav.ldir1]
ir15_8			reg[8]					in[bus.mdr] ld[uprav.ldir2]
ir7_0			reg[8]					in[bus.mdr] ld[uprav.ldir3]
ir				agg[4, 32]				in[ir7_0, ir15_8, ir23_16, ir31_24]
ir_bool			int_to_bool[32]			in[ir]
ir15_0			agg[2, 16]				in[ir7_0, ir15_8]
ir23_8			agg[2, 16]				in[ir15_8, ir23_16]

fetch2 scheme

dc1				dc[2]					in[fetch1.ir30, fetch1.ir31] e[exec2.start] out[g0, g1, g2, g3]
dc2				dc[3]					in[fetch1.ir27, fetch1.ir28, fetch1.ir29] e[g0] out[g0_pg0, g0_pg1, g0_pg2, g0_pg3, g0_pg4, g0_pg5, g0_pg6, g0_pg7]
dc3				dc[3]					in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg0] out[nop, halt, g0_pg0_2, g0_pg0_3, intd, inte, trpd, trpe]
dc4				dc[3]					in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg1] out[g0_pg1_0, jmp, jsr, rts, int, rti, g0_pg1_6, g0_pg1_7]
dc5				dc[3]					in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg2] out[beql, bneql, bneg, bnneg, bovf, bnovf, bcar, bncar]
dc6				dc[3]					in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg3] out[bgrt, bgrte, blss, blsse, bgrtu, bgrteu, blssu, blsseu]
dc7				dc[3]					in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg4] out[ldb, ldw, stb, stw, popb, popw, pushb, pushw]
dc8				dc[3]					in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg5] out[ldivtp, stivtp, ldimr, stimr, ldsp, stsp, g0_pg5_6, g0_pg5_7]
dc9				dc[3]					in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg6]	out[add, sub, inc, dec, and, or, xor, not]
dc10			dc[3]					in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg7] out[asr, lsr, ror, rorc, asl, lsl, rol, rolc]
dc11			dc[3]					in[fetch1.ir21, fetch1.ir22, fetch1.ir23] out[regdir, regind, memdir, memind, regindpom, bxpom, pcpom, imm]

fetch3 scheme

gropr			or[10]					in[fetch2.g3, fetch2.g2, fetch2.g1, fetch2.g0_pg5_7, fetch2.g0_pg5_6, fetch2.g0_pg1_7, fetch2.g0_pg1_6, fetch2.g0_pg1_0, fetch2.g0_pg0_3, fetch2.g0_pg0_2]
gradr			and[2]					in[fetch2.imm, gradr_or]
gradr_or		or[2]					in[fetch2.stb, fetch2.stw]
l1				or[12]					in[fetch2.g0_pg7, fetch2.not, fetch2.dec, fetch2.inc, fetch2.g0_pg5, fetch2.pushw, fetch2.pushb, fetch2.popw, fetch2.popb, fetch2.rti, fetch2.rts, fetch2.g0_pg0]
l2_branch		or[3]					in[fetch2.g0_pg3, fetch2.g0_pg2, fetch2.int]
l3_jump			or[2]					in[fetch2.jsr, fetch2.jmp]
store			or[2]					in[fetch2.stb, fetch2.stw]
l2_arlog		and[2]					in[l2_arlog_or0, l2_arlog_or1]
l2_arlog_or0	or[9]					in[fetch2.xor, fetch2.or, fetch2.and, fetch2.sub, fetch2.add, fetch2.stw, fetch2.stb, fetch2.ldw, fetch2.ldb]
l2_arlog_or1	or[2]					in[fetch2.regdir, fetch2.regind]
l3_arlog		and[2]					in[fetch2.imm, l3_arlog_or]
l3_arlog_or		or[6]					in[fetch2.xor, fetch2.or, fetch2.and, fetch2.sub, fetch2.add, fetch2.ldb]

intr1 scheme

prins			rsff					in[uprav.stprins, uprav.clprins]
prcod			rsff					in[uprav.stprcod, uprav.clprcod]
pradr			rsff					in[uprav.stpradr, uprav.clpradr]
prinm			rsff					in[fault.inm, uprav.clprinm]
imr				reg[16]					in[exec1.aw] ld[uprav.ldimr] init[15]
imr_bool		int_to_bool[16]			in[imr]
printr1			rsff					in[ui1.intr1, clintr1]
printr2			rsff					in[ui2.intr2, clintr2]
printr3			rsff					in[ui3.intr3, clintr3]
printr4			rsff					in[ui4.intr4, clintr4]
printr5			rsff					in[ui5.intr5, clintr5]
printr6			rsff					in[ui6.intr6, clintr6]
printr7			rsff					in[ui7.intr7, clintr7]
clintr			dc[3]					in[intr2.prl0, intr2.prl1, intr2.prl2] e[uprav.clintr]
prekid			or[6]					in[prins, prcod, pradr, prinm, intr2.printr, prekid_and]
prekid_not_rti	not						in[fetch2.rti]
prekid_and		and[2]					in[exec2.pswt, prekid_not_rti]

intr2 scheme

irm1			and[2]					in[intr1.imr1, intr1.printr1]
irm2			and[2]					in[intr1.imr2, intr1.printr2]
irm3			and[2]					in[intr1.imr3, intr1.printr3]
irm4			and[2]					in[intr1.imr4, intr1.printr4]
irm5			and[2]					in[intr1.imr5, intr1.printr5]
irm6			and[2]					in[intr1.imr6, intr1.printr6]
irm7			and[2]					in[intr1.imr7, intr1.printr7]
cd				cd[8]					in[false, irm1, irm2, irm3, irm4, irm5, irm6, irm7] out[prl0, prl1, prl2]
imrprintr		or[7]					in[irm1, irm2, irm3, irm4, irm5, irm6, irm7]
printr			and[3]					in[imrprintr, exec2.pswi, cmp_grt]
cmp				cmp[3]					a[prl0, prl1, prl2] b[exec2.pswl0, exec2.pswl1, exec2.pswl2]

intr3 scheme

cd1				cd[4]					in[intr1.prcod, intr1.pradr, intr1.prinm, exec2.pswt] out[cd1_0, cd1_1]
uint			bool_to_int[8]			in[cd1_0, cd1_1, false, false, false, false, false, false]
cd2				cd[8]					in[false, intr2.irm1, intr2.irm2, intr2.irm3, intr2.irm4, intr2.irm5, intr2.irm6, intr2.irm7] out[cd2_0, cd2_1, cd2_2]
uext			bool_to_int[8]			in[cd2_0, cd2_1, cd2_2, true, false, false, false, false]
ivtp			reg[16]					in[exec1.aw] ld[uprav.ldivtp]
mx				mp[4, 8]				in[fetch1.ir23_16, uext, uint] ctrl[uprav.mxbr0, uprav.mxbr1]
br				reg[8]					in[mx] ld[uprav.ldbr]
br_bool			int_to_bool[8]			in[br]
ivtdsp			bool_to_int[16]			in[false, br0, br1, br2, br3, br4, br5, br6, br7, false, false, false, false, false, false, false]

uprav scheme

// counter

kmadr			km[kmadr.conf, 8]		in[fetch2.regdir, fetch2.regind, fetch2.memdir, fetch2.memind, fetch2.regindpom, fetch2.bxpom, fetch2.pcpom, fetch2.imm]
kmopr			km[kmopr.conf, 8]		in[fetch2.nop, fetch2.halt, fetch2.intd, fetch2.inte, fetch2.trpd, fetch2.trpe, fetch2.ldb, fetch2.ldw, fetch2.stb, fetch2.stw, fetch2.popb, fetch2.popw, fetch2.pushb, fetch2.pushw, fetch2.ldivtp, fetch2.stivtp, fetch2.ldimr, fetch2.stimr, fetch2.ldsp, fetch2.stsp, fetch2.add, fetch2.sub, fetch2.inc, fetch2.dec, fetch2.and, fetch2.or, fetch2.xor, fetch2.not, fetch2.asr, fetch2.lsr, fetch2.ror, fetch2.rorc, fetch2.asl, fetch2.lsl, fetch2.rol, fetch2.rolc, fetch2.beql, fetch2.bneql, fetch2.bneg, fetch2.bnneg, fetch2.bovf, fetch2.bnovf, fetch2.bcar, fetch2.bncar, fetch2.bgrt, fetch2.bgrte, fetch2.blss, fetch2.blsse, fetch2.bgrtu, fetch2.bgrteu, fetch2.blssu, fetch2.blsseu, fetch2.jmp, fetch2.int, fetch2.jsr, fetch2.rti, fetch2.rts]
kmbr			km[kmbr.conf, 8]		in[uprav.val0, uprav.val2, uprav.val3, uprav.val7, uprav.val9, uprav.valA, uprav.valE, uprav.val11, uprav.val12, uprav.val16, uprav.val17, uprav.val20, uprav.val24, uprav.val2A, uprav.val2B, uprav.val2D, uprav.val2E, uprav.val38, uprav.val39, uprav.val3C, uprav.val3D, uprav.val3E, uprav.val43, uprav.val50, uprav.val5C, uprav.val5D, uprav.val5F, uprav.val62, uprav.val63, uprav.val65, uprav.val66, uprav.val68, uprav.val6A, uprav.val6B, uprav.val70, uprav.val71, uprav.val74, uprav.val75, uprav.val7B, uprav.val7C, uprav.val80, uprav.val81, uprav.val84, uprav.val85, uprav.valA7, uprav.valA8, uprav.valAB, uprav.valAC, uprav.valAF, uprav.valB0, uprav.valB3, uprav.valB4, uprav.valB7, uprav.valB8, uprav.valBB, uprav.valBC, uprav.valC0, uprav.valC3, uprav.valC4, uprav.valC7, uprav.valC8, uprav.valCB, uprav.valCC, uprav.valCF, uprav.valD0, uprav.valD3, uprav.valD5, uprav.valD7, uprav.valD9, uprav.valDB, uprav.valDC, uprav.valDD, uprav.valDE, uprav.valE0, uprav.valE1]
mp				mp[4, 8]				in[kmbr, kmadr, kmopr] ctrl[uprav.bradr, uprav.bropr]
cnt				reg[8]					in[mp] ld[cnt_or] inc[/cnt_or]
cnt_bool		int_to_bool[8]			in[cnt]
cnt_or			or[4]					in[uprav.bradr, uprav.bropr, uprav.bruncnd, uprav.brcnd]
t				dc[8, hex]				in[cnt0, cnt1, cnt2, cnt3, cnt4, cnt5, cnt6, cnt7]

// oper -------------------------------

// bus

mxmar2			or[20]					in[t32, t35, t37, t69, t6F, t73, t7A, t7F, t83, tA6, tAA, tAE, tB2, tB6, tBA, tC2, tC6, tCA, tCE, tDC]
mxmar1			or[3]					in[t27, t29, t30]
mxmar0			or[18]					in[t25, t30, t69, t6F, t73, t7A, t7F, t83, tA6, tAA, tAE, tB2, tB6, tBA, tC2, tC6, tCA, tCE]
ldmar			or[28]					in[t1, t8, t10, t15, t25, t27, t29, t30, t32, t35, t37, t69, t6F, t73, t7A, t7F, t83, tA6, tAA, tAE, tB2, tB6, tBA, tC2, tC6, tCA, tCE, tDC]
incmar			or[4]					in[t2C, t3C, t64, tDF]
mxmdr2			or[6]					in[tA6, tAA, tC2, tC6, tCA, tCE]
mxmdr1			or[5]					in[t61, t64, t7F, t83, tCA]
mxmdr0			or[7]					in[t5B, t64, t7A, t83, tAA, tC6, tCE]
ldmdr			or[12]					in[t5B, t61, t64, t7A, t7F, t83, tA6, tAA, tC2, tC6, tCA, tCE]
emar			or[29]					in[t3, tA, t12, t17, t2B, t2E, t39, t3E, t5D, t63, t66, t6B, t71, t75, t7C, t81, t85, tA8, tAC, tB0, tB4, tB8, tBC, tC4, tC8, tCC, tD0, tDE, tE1]
emdr			or[12]					in[t5D, t63, t66, t7C, t81, t85, tA8, tAC, tC4, tC8, tCC, tD0]
rdcpu			or[17]					in[t3, tA, t12, t17, t2B, t2E, t39, t3E, t6B, t71, t75, tB0, tB4, tB8, tBC, tDE, tE1]
wrcpu			or[12]					in[t5D, t63, t66, t7C, t81, t85, tA8, tAC, tC4, tC8, tCC, tD0]
lddwh			or[5]					in[t2C, t3C, t76, tBD, tDF]
lddwl			or[5]					in[t2F, t3F, t72, tB9, tE2]

// fetch

mxpc1			or[2]					in[tA3, tAD]
mxpc0			pin						in[tA2]
ldpc			or[5]					in[tA2, tA3, tAD, tBE, tE3]
incpc			or[4]					in[t1, t8, t10, t15]
ldir0			pin						in[t4]
ldir1			pin						in[tB]
ldir2			pin						in[t13]
ldir3			pin						in[t18]

// addr

ldgprar			pin						in[tB]
incgprar		pin						in[t34]
mxgpr			pin						in[t68]
wrgpr			or[2]					in[t5F, t68]
ldsp			pin						in[t8C]
incsp			or[9]					in[t79, t7E, t82, tA5, tA9, tC1, tC5, tC9, tCD]
decsp			or[7]					in[t69, t6F, t73, tAE, tB2, tB6, tBA]
mxadda1			or[3]					in[t35, t37, tA2]
mxadda0			or[3]					in[t32, t34, t35]
mxaddb1			or[2]					in[t35, tA2]
mxaddb0			or[4]					in[t32, t34, t37, tA2]
ldcw			pin						in[t34]

// exec

mxab			or[2]					in[t57, t6D]
ldab			or[10]					in[t57, t6D, t8D, t8F, t91, t93, t95, t97, t99, t9B]
shr				pin						in[t9D]
shl				pin						in[t9F]
mxbb1			pin						in[t42]
mxbb0			or[2]					in[t3B, t6C]
ldbb			or[4]					in[t23, t3B, t42, t6C]
mxaw1			or[2]					in[t87, t89]
mxaw0			or[2]					in[t89, t8B]
ldaw			or[5]					in[t59, t78, t87, t89, t8B]
mxbw1			pin						in[t43]
mxbw0			or[2]					in[t40, t77]
ldbw			or[4]					in[t24, t40, t43, t77]
stpswi			pin						in[t54]
clpswi			or[2]					in[t53, tE3]
stpswt			pin						in[t56]
clpswt			or[2]					in[t55, tE3]
ldl				pin						in[tDA]
ldn				or[12]					in[t58, t6E, t8E, t90, t92, t94, t96, t98, t9A, t9C, t9E, tA0]
ldz				or[12]					in[t58, t6E, t8E, t90, t92, t94, t96, t98, t9A, t9C, t9E, tA0]
ldc				or[12]					in[t58, t6E, t8D, t8F, t91, t93, t96, t98, t9A, t9C, t9D, t9F]
ldv				or[12]					in[t58, t6E, t8D, t8F, t91, t93, t96, t98, t9A, t9C, t9E, tA0]
ldpswl			pin						in[tB1]
ldpswh			pin						in[tB5]
clstart			pin						in[t52]
add				pin						in[t8D]
sub				pin						in[t8F]
inc				pin						in[t91]
dec				pin						in[t93]
and				pin						in[t95]
or				pin						in[t97]
xor				pin						in[t99]
not				pin						in[t9B]

// intr

stprins			pin						in[tA4]
clprins			pin						in[tD2]
stprcod			pin						in[t6]
clprcod			pin						in[tD4]
stpradr			pin						in[tD]
clpradr			pin						in[tD6]
clprinm			pin						in[tD8]
clintr			pin						in[tDA]
ldimr			pin						in[t8A]
ldivtp			pin						in[t88]
mxbr1			or[4]					in[tD4, tD6, tD8, tDB]
mxbr0			pin						in[tDA]
ldbr			or[6]					in[tD2, tD4, tD6, tD8, tDA, tDB]

// uprav ------------------------------

bradr			pin						in[t20]
bropr			pin						in[t50]
bruncnd			or[57]					in[t6, tD, t18, t23, t24, t26, t28, t31, t33, t36, t3B, t40, t42, t43, t51, t52, t53, t54, t55, t56, t58, t59, t5E, t5F, t67, t68, t6E, t78, t7D, t86, t87, t88, t89, t8A, t8B, t8C, t8E, t90, t92, t94, t96, t98, t9A, t9C, t9E, tA0, tA2, tA3, tA4, tAD, tBE, tD2, tD4, tD6, tD8, tDA, tE3]
brcnd_and0		and[2]					in[brnotstart, /exec2.start]
brcnd_and1		and[2]					in[brhack, bus.hack]
brcnd_and2		and[2]					in[brnotfccpu, /bus.fccpu]
brcnd_and3		and[2]					in[brnotgropr, /fetch3.gropr]
brcnd_and4		and[2]					in[brl1, fetch3.l1]
brcnd_and5		and[2]					in[brnotgradr, /fetch3.gradr]
brcnd_and6		and[2]					in[brl2_branch, fetch3.l2_branch]
brcnd_and7		and[2]					in[brl2_arlog, fetch3.l2_arlog]
brcnd_and8		and[2]					in[brl3_jump, fetch3.l3_jump]
brcnd_and9		and[2]					in[brl3_arlog, fetch3.l3_arlog]
brcnd_and10		and[2]					in[brstore, fetch3.store]
brcnd_and11		and[2]					in[brldw, fetch2.ldw]
brcnd_and12		and[2]					in[brregdir, fetch2.regdir]
brcnd_and13		and[2]					in[brnotbrpom, /exec4.brpom]
brcnd_and14		and[2]					in[brnotprekid, /intr1.prekid]
brcnd_and15		and[2]					in[brnotprins, /intr1.prins]
brcnd_and16		and[2]					in[brnotprcod, /intr1.prcod]
brcnd_and17		and[2]					in[brnotpradr, /intr1.pradr]
brcnd_and18		and[2]					in[brnotprinm, /intr1.prinm]
brcnd_and19		and[2]					in[brnotprintr, /intr2.printr]
brcnd			or[20]					in[brcnd_and0, brcnd_and1, brcnd_and2, brcnd_and3, brcnd_and4, brcnd_and5, brcnd_and6, brcnd_and7, brcnd_and8, brcnd_and9, brcnd_and10, brcnd_and11, brcnd_and12, brcnd_and13, brcnd_and14, brcnd_and15, brcnd_and16, brcnd_and17, brcnd_and18, brcnd_and19]
brnotstart		pin						in[t0]
brhack			or[29]					in[t2, t9, t11, t16, t2A, t2D, t38, t3D, t5C, t62, t65, t6A, t70, t74, t7B, t80, t84, tA7, tAB, tAF, tB3, tB7, tBB, tC3, tC7, tCB, tCF, tDD, tE0]
brnotfccpu		or[29]					in[t3, tA, t12, t17, t2B, t2E, t39, t3E, t5D, t63, t66, t6B, t71, t75, t7C, t81, t85, tA8, tAC, tB0, tB4, tB8, tBC, tC4, tC8, tCC, tD0, tDE, tE1]
brnotgropr		pin						in[t5]
brl1			pin						in[t7]
brnotgradr		pin						in[tC]
brl2_branch		pin						in[tE]
brl2_arlog		pin						in[tF]
brl3_jump		pin						in[t13]
brl3_arlog		pin						in[t14]
brstore			or[7]					in[t21, t25, t27, t30, t32, t35, t37]
brldw			or[3]					in[t22, t3A, t41]
brregdir		or[2]					in[t5A, t60]
brnotbrpom		pin						in[tA1]
brnotprekid		pin						in[tC0]
brnotprins		pin						in[tD1]
brnotprcod		pin						in[tD3]
brnotpradr		pin						in[tD5]
brnotprinm		pin						in[tD7]
brnotprintr		pin						in[tD9]

val0			or[4]					in[t0, t52, tC0, tE3]
val2			pin						in[t2]
val3			pin						in[t3]
val7			pin						in[t5]
val9			pin						in[t9]
valA			pin						in[tA]
valE			pin						in[tC]
val11			pin						in[t11]
val12			pin						in[t12]
val16			pin						in[t16]
val17			pin						in[t17]
val20			or[3]					in[tF, t14, t18]
val24			pin						in[t22]
val2A			pin						in[t2A]
val2B			pin						in[t2B]
val2D			pin						in[t2D]
val2E			pin						in[t2E]
val38			or[6]					in[t26, t28, t31, t33, t36, t38]
val39			pin						in[t39]
val3C			pin						in[t3A]
val3D			pin						in[t3D]
val3E			pin						in[t3E]
val43			pin						in[t41]
val50			or[16]					in[t7, tE, t13, t21, t23, t24, t25, t27, t30, t32, t35, t37, t3B, t40, t42, t43]
val5C			pin						in[t5C]
val5D			pin						in[t5D]
val5F			pin						in[t5A]
val62			pin						in[t62]
val63			pin						in[t63]
val65			pin						in[t65]
val66			pin						in[t66]
val68			pin						in[t60]
val6A			pin						in[t6A]
val6B			pin						in[t6B]
val70			pin						in[t70]
val71			pin						in[t71]
val74			pin						in[t74]
val75			pin						in[t75]
val7B			pin						in[t7B]
val7C			pin						in[t7C]
val80			pin						in[t80]
val81			pin						in[t81]
val84			pin						in[t84]
val85			pin						in[t85]
valA7			pin						in[tA7]
valA8			pin						in[tA8]
valAB			pin						in[tAB]
valAC			pin						in[tAC]
valAF			pin						in[tAF]
valB0			pin						in[tB0]
valB3			pin						in[tB3]
valB4			pin						in[tB4]
valB7			pin						in[tB7]
valB8			pin						in[tB8]
valBB			pin						in[tBB]
valBC			pin						in[tBC]
valC0			or[39]					in[t6, tD, t51, t53, t54, t55, t56, t58, t59, t5E, t5F, t67, t68, t6E, t78, t7D, t86, t87, t88, t89, t8A, t8B, t8C, t8E, t90, t92, t94, t96, t98, t9A, t9C, t9E, tA0, tA1, tA2, tA3, tA4, tAD, tBE]
valC3			pin						in[tC3]
valC4			pin						in[tC4]
valC7			pin						in[tC7]
valC8			pin						in[tC8]
valCB			pin						in[tCB]
valCC			pin						in[tCC]
valCF			pin						in[tCF]
valD0			pin						in[tD0]
valD3			pin						in[tD1]
valD5			pin						in[tD3]
valD7			pin						in[tD5]
valD9			pin						in[tD7]
valDB			pin						in[tD9]
valDC			or[5]					in[tD2, tD4, tD6, tD8, tDA]
valDD			pin						in[tDD]
valDE			pin						in[tDE]
valE0			pin						in[tE0]
valE1			pin						in[tE1]


mem_oper scheme

notrdbus		tsb_bool				in[bus.rdbus]
notrdbus_not	not						in[notrdbus]
select			and[4]					in[bus.abus15, bus.abus14, bus.abus13, bus.abus12]
select_not		not						in[select]
notwrbus		tsb_bool				in[bus.wrbus]
notwrbus_not	not						in[notwrbus]
rdmem			and[2]					in[notrdbus_not, select_not]
wrmem			and[2]					in[notwrbus_not, select_not]
fcbus_one		tsb_bool				in[true] ctrl[mem_uprav.fcmem]
fcbus			not						in[fcbus_one]
mem				mem[66560, 8]			in[bus.abus, bus.dbus] rd[rdmem] wr[wrmem]
mem_out			tsb[8]					in[mem] ctrl[mem_uprav.memout]

mem_uprav scheme

memacc_or		or[2]					in[mem_oper.rdmem, mem_oper.wrmem]
incmemacc		and[2]					in[memacc_or, /fcmem]
//clmemacc		and[2]					in[memacc_or, fcmem]
memacc			reg[8]					cl[fcmem] inc[incmemacc] init[0]
time			reg[8]					init[4]
cmp				cmp[1]					a[memacc] b[time] eql[fcmem]
memout			and[2]					in[mem_oper.rdmem, fcmem]

fault scheme

inm				pin						in[false]

ui1 scheme

intr1			pin						in[false]

ui2 scheme

intr2			pin						in[false]

ui3 scheme

intr3			pin						in[false]

ui4 scheme

intr4			pin						in[false]

ui5 scheme

intr5			pin						in[false]

ui6 scheme

intr6			pin						in[false]

ui7 scheme

intr7			pin						in[false]

ui scheme

hreq			pin						in[false]
