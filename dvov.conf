util scheme

true			pin[true]
false			pin[false]

addr scheme

mdr_to_gprar 	inttoint[8,5] 		in[bus.mdr]
gprar 			reg[5] 				in[mdr_to_gprar] ld[oper1.ldgprar] inc[oper1.incgprar]
ab_to_mx1		inttoint[8,16]		in[exec1.ab]
mx1 			mp[2]				in[ab_to_mx1, exec1.aw] ctrl[oper1.mxgpr]
gpr				gpr[32, 16]			addr[gprar] in[mx1] wr[oper1.wrgpr] rd[util.true]					
sp 				reg[16] 			in[exec1.aw] inc[oper1.incsp] dec[oper1.decsp] ld[oper1.ldsp] init[4096]
add 			add[16]				in[mx2, mx3]
cw 				reg[16]				in[add] ld[oper1.ldcw]
mx2				mp[4] 				in[intr3.ivtp, gpr, fetch1.pc, cw] ctrl[oper1.mxadda0, oper1.mxadda1]
mx3 			mp[4]				in[intr3.ivtdsp, fetch1.ir15_0, gpr, ir_to_mx3] ctrl[oper1.mxaddb0, oper1.mxaddb1]
ir_to_mx3 		inttoint[8,16,true] in[fetch1.ir23_16]

bus scheme

mx1				mp[8]				in[fetch1.pc, addr.gpr, fetch1.ir15_0, dw, addr.add, addr.sp] ctrl[oper1.mxmar0, oper1.mxmar1, oper1.mxmar2]
mx2				mp[8]				in[bus.dbus, exec1.ab, exec1.aw15_8, exec1.aw7_0, fetch1.pc15_8, fetch1.pc7_0, exec2.psw15_8, exec2.psw7_0] ctrl[oper1.mxmdr0, oper1.mxmdr1, oper1.mxmdr2]
mar				reg[16]				in[mx1] ld[oper1.ldmar] inc[oper1.incmar]
mdr				reg[16]				in[mx2] ld[ldmdr]
mdr_bool		inttobool[8]		in[mdr]
ldmdr			or[2]				in[oper1.ldmdr, mdrin]
mdrin			and[2]				in[oper1.rdcpu, fccpu]
fccpu			not					in[notfcbus]
notfcbus		tsb					in[bus.fcbus]
mar_out			tsb					in[mar] ctrl[oper1.emar]
mdr_out			tsb					in[mdr] ctrl[oper1.emdr]
dwh				reg[8]				in[mdr] ld[oper1.lddwh]
dwl				reg[8]				in[mdr] ld[oper1.lddwl]
// add aggregated dw signal
notrdbus		not					in[onerdbus]
notwrbus		not					in[onewrbus]
onerdbus		tsb					in[util.true] ctrl[oper1.rdcpu]
onewrbus		tsb					in[util.true] ctrl[oper1.wrcpu]
hack			and[2]				in[ui.hreq, notemar]
notemar			not					in[oper1.emar]
// add buses RDBUS, WRBUS, FCBUS

exec1 scheme

alu				alu					in[ab, bb] not[oper1.not] xor[oper1.xor] or[oper1.or] and[oper1.and] dec[oper1.dec] inc[oper1.inc] sub[oper1.sub] add[oper1.add] 
alu_bool		inttobool[8]		in[alu]
ab				reg[8]				in[mx1] ld[oper1.ldab] shr[oper1.shr] ir[mx3] shl[oper1.shl] il[mx4]
bb				reg[8]				in[mx2] ld[oper1.ldbb]
bb_bool			inttobool[8]		in[bb]
mx1				mp[2]				in[alu, bb] ctrl[oper1.mxab]
mx2				mp[4]				in[addr.gpr, bus.mdr, fetch1.ir15_8] ctrl [oper1.mxbb0, oper1.mxbb1]
ab_bool			inttobool[8]		in[ab]
mx3				mp[4]				in[ab7, util.false, ab0, exec2.pswc] ctrl[cd1_0, cd1_1]
cd1				cd[4]				in[fetch2.rorc, fetch2.ror, fetch2.lsr, fetch2.asr] out[cd1_0, cd1_1]
mx4				mp[4]				in[util.false, util.false, ab7, exec2.pswc] ctrl[cd2_0, cd2_1]
cd2				cd[4]				in[fetch2.rolc, fetch2.rol, fetch2.lsl, fetch2.asl] out[cd2_0, cd2_1]
aw				reg[16]				in[mx5] ld[oper1.ldaw]
// add aw15_8 and aw7_0
mx5				mp[4]				in[bw, addr.sp, intr3.ivtp, intr3.imr] ctrl[oper1.mxaw0, oper1.mxaw1]
bw				reg[16]				in[mx6]
mx6				mp[4]				in[addr.gpr, bus.dw, fetch1.ir15_0] ctrl[oper1.mxbw0, oper1.mxbw1]

exec2 scheme

pswi			rsff				in[pswi_s, pswi_r]
pswi_s			or[2]				in[oper1.stpswi, pswi_s_and]
pswi_s_and		and[2]				in[oper1.ldpswh, bus.mdr7]
pswi_r			or[2]				in[oper1.clpswi, pswi_r_and]
pswi_r_and		and[2]				in[oper1.ldpswh, /bus.mdr7]

pswt			rsff				in[pswt_s, pswt_r]
pswt_s			or[2]				in[oper1.stpswt, pswt_s_and]
pswt_s_and		and[2]				in[oper1.ldpswh, bus.mdr6]
pswt_r			or[2]				in[oper1.clpswt, pswt_r_and]
pswt_r_and		and[2]				in[oper1.ldpswh, /bus.mdr6]

pswn			rsff				in[pswn_s, pswn_r]
pswn_s			or[2]				in[pswn_s_and0, pswn_s_and1]
pswn_s_and0		and[2]				in[oper1.ldn, exec3.n]
pswn_s_and1		and[2]				in[oper1.ldpswl, bus.mdr0]
pswn_r			or[2]				in[pswn_r_and0, pswn_r_and1]
pswn_r_and0		and[2]				in[oper1.ldpsw, /bus.mdr0]
pswn_r_and1		and[2]				in[oper1.ldn, /exec3.n]

pswz			rsff				in[pswz_s, pswz_r]
pswz_s			or[2]				in[pswz_s_and0, pswz_s_and1]
pswz_s_and0		and[2]				in[oper1.ldz, exec3.z]
pswz_s_and1		and[2]				in[oper1.ldpswl, bus.mdr1]
pswz_r			or[2]				in[pswz_r_and0, pswz_r_and1]
pswz_r_and0		and[2]				in[oper1.ldpsw, /bus.mdr1]
pswz_r_and1		and[2]				in[oper1.ldz, /exec3.z]

pswc			rsff				in[pswc_s, pswc_r]
pswc_s			or[2]				in[pswc_s_and0, pswc_s_and1]
pswc_s_and0		and[2]				in[oper1.ldc, exec3.c]
pswc_s_and1		and[2]				in[oper1.ldpswl, bus.mdr2]
pswc_r			or[2]				in[pswc_r_and0, pswc_r_and1]
pswc_r_and0		and[2]				in[oper1.ldpsw, /bus.mdr2]
pswc_r_and1		and[2]				in[oper1.ldc, /exec3.c]

pswv			rsff				in[pswv_s, pswv_r]
pswv_s			or[2]				in[pswv_s_and0, pswv_s_and1]
pswv_s_and0		and[2]				in[oper1.ldv, exec3.v]
pswv_s_and1		and[2]				in[oper1.ldpswl, bus.mdr3]
pswv_r			or[2]				in[pswv_r_and0, pswv_r_and1]
pswv_r_and0		and[2]				in[oper1.ldpsw, /bus.mdr3]
pswv_r_and1		and[2]				in[oper1.ldv, /exec3.v]

pswl0			rsff				in[pswl0_s, pswl0_r]
pswl0_s			or[2]				in[pswl0_s_and0, pswl0_s_and1]
pswl0_s_and0	and[2]				in[oper1.ldl, intr2.prl0]
pswl0_s_and1	and[2]				in[oper1.ldpswl, bus.mdr4]
pswl0_r			or[2]				in[pswl0_r_and0, pswl0_r_and1]
pswl0_r_and0	and[2]				in[oper1.ldpsw, /bus.mdr4]
pswl0_r_and1	and[2]				in[oper1.ldl, /intr2.prl0]

pswl1			rsff				in[pswl1_s, pswl1_r]
pswl1_s			or[2]				in[pswl1_s_and0, pswl1_s_and1]
pswl1_s_and0	and[2]				in[oper1.ldl, intr2.prl1]
pswl1_s_and1	and[2]				in[oper1.ldpswl, bus.mdr5]
pswl1_r			or[2]				in[pswl1_r_and0, pswl1_r_and1]
pswl1_r_and0	and[2]				in[oper1.ldpsw, /bus.mdr5]
pswl1_r_and1	and[2]				in[oper1.ldl, /intr2.prl1]

pswl2			rsff				in[pswl2_s, pswl2_r]
pswl2_s			or[2]				in[pswl2_s_and0, pswl2_s_and1]
pswl2_s_and0	and[2]				in[oper1.ldl, intr2.prl2]
pswl2_s_and1	and[2]				in[oper1.ldpswl, bus.mdr6]
pswl2_r			or[2]				in[pswl2_r_and0, pswl2_r_and1]
pswl2_r_and0	and[2]				in[oper1.ldpsw, /bus.mdr6]
pswl2_r_and1	and[2]				in[oper1.ldl, /intr2.prl2]

psw7_0			booltoint[8]		in[pswn, pswz, pswc, pswv, pswl0, pswl1, pswl2, util.false]
psw15_8			booltoint[8]		in[util.false, util.false, util.false, util.false, util.false, util.false, pswt, pswi]
start			rsff				in[util.false, oper1.clstart] init[true]

exec3 scheme

n				and[2]				in[exec1.ab7, n_z_or]
n_z_or			or[18]				in[fetch2.ldb, fetch2.popb, fetch2.add, fetch2.sub, fetch2.inc, fetch2.dec, fetch2.and, fetch2.or, fetch2.xor, fetch2.not, fetch2.asr, fetch2.lsr, fetch2.ror, fetch2.rorc, fetch2.asl, fetch2.lsl, fetch2.rol, fetch2.rolc]
z				and[2]				in[n_z_or, z_and]
z_and			and[8]				in[/exec1.ab0, /exec1.ab1, /exec1.ab2, /exec1.ab3, /exec1.ab4, /exec1.ab5, /exec1.ab6, /exec1.ab7]
c				or[4]				in[c_and0, c_and1, c_and2, c_and3]
c_and0			and[2]				in[c_or0, exec1.alu_c8]
c_and1			and[2]				in[c_or1, /exec1.alu_c8]
c_and2			and[2]				in[c_or2, exec1.ab0]
c_and3			and[2]				in[c_or3, exec1.ab7]
c_or0			or[2]				in[fetch2.add, fetch2.inc]
c_or1			or[2]				in[fetch2.sub, fetch2.dec]
c_or2			or[4]				in[fetch2.asr, fetch2.lsr, fetch2.ror, fetch2.rorc]
c_or3			or[4]				in[fetch2.asl, fetch2.lsl, fetch2.rol, fetch2.rolc]
v				or[4]				in[v_and0, v_and1, v_and2, v_and3]
v_and0			and[2]				in[fetch2.add, vadd]
v_and1			and[2]				in[fetch2.sub, vsub]
v_and2			and[2]				in[fetch2.inc, vinc]
v_and3			and[2]				in[fetch2.dec, vdec]
vadd			or[2]				in[vadd_and0, vadd_and1]
vadd_and0		and[3]				in[/exec1.ab7, /exec1.bb7, exec1.alu7]
vadd_and1		and[3]				in[exec1.ab7, exec1.bb7, /exec1.alu7]
vsub			or[2]				in[vsub_and0, vsub_and1]
vsub_and0		and[3]				in[/exec1.ab7, exec1.bb7, exec1.alu7]
vsub_and1		and[3]				in[exec1.ab7, /exec1.bb7, /exec1.alu7]
vinc			and[2]				in[/exec1.ab7, exec1.alu7]
vdec			and[2]				in[exec1.ab7, /exec1.alu]

exec4 scheme

eql				pin					in[exec2.pswz]
neql			not					in[exec2.pswz]
lss				xor[2]				in[exec2.pswn, exec2.pswv]
grte			not					in[lss]
lsse			or[2]				in[lss, exec2.pswz]
grt				not					in[lsse]
lsseu			or[2]				in[exec2.pswc, exec2.pswz]
grtu			not					in[lsseu]
lssu			pin					in[exec2.pswc]
grteu			not					in[exec2.pswc]
ovf				pin					in[exec2.pswv]
novf			not					in[exec2.pswv]
neg				pin					in[exec2.pswn]
nneg			not					in[exec2.pswn]

mx7				mp[8]				in[eql, neql, neg, nneg, ovf, novf, lssu, grteu] ctrl[fetch1.ir24, fetch1.ir25, fetch1.ir26]
mx8				mp[8]				in[grt, grte, lss, lsse, grtu, grteu, lssu, lsseu] ctrl[fetch1.ir24, fetch1.ir25, fetch1.ir26]
brpom			mp[2]				in[mx8, mx7] ctrl[fetch1.ir27]

fetch1 scheme

pc				reg[16]				in[mx] inc[oper1.incpc] ld[oper1.ldpc]
// add pc15_8 and pc7_0
mx				mp[4]				in[bus.dw, addr.add, ir23_8] ctrl[oper1.mxpc0, oper1.mxpc1]
ir31_24			reg[8]				in[bus.mdr] ld[oper1.ldir0]
ir23_16			reg[8]				in[bus.mdr] ld[oper1.ldir1]
ir15_8			reg[8]				in[bus.mdr] ld[oper1.ldir2]
ir7_0			reg[8]				in[bus.mdr] ld[oper1.ldir3]
// add ir15_0, ir, ir27 to ir24

fetch2 scheme

dc1				dc[2]				in[fetch1.ir30, fetch1.ir31] e[exec2.start] out[g0, g1, g2, g3]
dc2				dc[3]				in[fetch1.ir27, fetch1.ir28, fetch1.ir29] e[g0] out[g0_pg0, g0_pg1, g0_pg2, g0_pg3, g0_pg4, g0_pg5, g0_pg6, g0_pg7]
dc3				dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg0] out[nop, halt, g0_pg0_2, g0_pg0_3, intd, inte, trpd, trpe]
dc4				dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg1] out[g0_pg1_0, jmp, jsr, rts, int, rti, g0_pg1_6, g0_pg1_7]
dc5				dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg2] out[beql, bneql, bneg, bnneg, bovf, bnovf, bcar, bncar]
dc6				dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg3] out[bgrt, bgrte, blss, blsse, bgrtu, bgtreu, blss, blsseu]
dc7				dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg4] out[ldb, ldw, stb, stw, popb, popw, pushb, pushw]
dc8				dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg5] out[ldivtp, stivtp, ldimr, stimr, ldsp, stsp, g0_pg5_6, g0_pg5_7]
dc9				dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg6]	out[add, sub, inc, dec, and, or, xor, not]
dc10			dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] e[g0_pg7] out[asr, lsr, ror, rorc, asl, lsl, rol, rolc]
dc11			dc[3]				in[fetch1.ir24, fetch1.ir25, fetch1.ir26] out[regdir, regind, memdir, memind, regindpom, bxpom, pcpom, imm]

fetch3 scheme

gropr			or[10]				in[fetch2.g3, fetch2.g2, fetch2.g1, fetch2.g0_pg5_7, fetch2.g0_pg5_6, fetch2.g0_pg1_7, fetch2.g0_pg1_6, fetch2.g0_pg1_0, fetch2.g0_pg0_3, fetch2.g0_pg0_2]
gradr			and[2]				in[fetch2.imm, gradr_or]
gradr_or		or[2]				in[fetch2.stb, fetch2.stw]
l1				or[12]				in[fetch2.g0_pg7, fetch2.not, fetch2.dec, fetch2.inc, fetch2.g0_pg5, fetch2.pushw, fetch2.pushb, fetch2.popw, fetch2.popb, fetch2.rti, fetch2.rts, fetch2.g0_pg0]
l2_branch		or[3]				in[fetch2.g0_pg3, fetch2.g0_pg2, fetch2.int]
l3_jump			or[2]				in[fetch2.jsr, fetch2.jmp]
store			or[2]				in[fetch2.stb, fetch2.stw]
l2_arlog		and[2]				in[l2_arlog_or0, l2_arlog_or1]
l2_arlog_or0	or[9]				in[fetch2.xor, fetch2.or, fetch2.and, fetch2.sub, fetch2.add, fetch2.stw, fetch2.stb, fetch2.ldw, fetch2.ldb]
l2_arlog_or1	or[2]				in[fetch2.regdir, fetch2.regind]
l3_arlog		and[2]				in[fetch2.imm, l3_arlog_or]
l3_arlog_or		or[6]				in[fetch2.xor, fetch2.or, fetch2.and, fetch2.sub, fetch2.add, fetch2.ldb]
